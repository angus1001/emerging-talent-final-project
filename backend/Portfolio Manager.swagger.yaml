info:
  title: Portfolio Manager
  description: ''
  version: 1.0.0
tags:
  - name: Users
  - name: Stocks
  - name: Portfolio
  - name: Orders
  - name: Watchlist
paths:
  /login:
    post:
      summary: Login
      deprecated: false
      description: ''
      tags: []
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
            required:
              - username
              - email
      responses:
        '200':
          description: ''
          headers: {}
          schema:
            type: object
            properties:
              user_id:
                type: string
            required:
              - user_id
      security: []
      consumes:
        - application/json
      produces:
        - application/json
  /users:
    get:
      summary: Get all users
      deprecated: false
      description: ''
      tags:
        - Users
      parameters: []
      responses:
        '200':
          description: Successful operation
          headers: {}
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      security: []
      produces:
        - application/json
    post:
      summary: Create a new user
      deprecated: false
      description: ''
      tags:
        - Users
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              user_id:
                type: integer
                description: Unique identifier for the user
              first_name:
                type: string
                description: User's first name
              last_name:
                type: string
                description: User's last name
              password:
                type: string
                description: Hashed password
                minLength: 8
              email:
                type: string
                format: email
                description: User's email address
              phone:
                type: string
              created_at:
                type: string
                format: date-time
                description: Timestamp when user was created
              language:
                type: string
              location:
                type: string
            required:
              - user_id
              - first_name
              - last_name
              - password
      responses:
        '201':
          description: User created successfully
          headers: {}
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid input
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      consumes:
        - application/json
      produces:
        - application/json
  /users/{userId}:
    get:
      summary: Get user by ID
      deprecated: false
      description: ''
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
      responses:
        '200':
          description: Successful operation
          headers: {}
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      produces:
        - application/json
    put:
      summary: Update user details
      deprecated: false
      description: ''
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
        - required: true
          name: body
          in: body
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: User updated
          headers: {}
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      consumes:
        - application/json
      produces:
        - application/json
    delete:
      summary: Delete a user
      deprecated: false
      description: ''
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
      responses:
        '204':
          description: User deleted
          headers: {}
          schema:
            type: object
            properties: {}
        '404':
          description: User not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      produces:
        - application/json
  /stocks:
    get:
      summary: Get all stocks
      deprecated: false
      description: ''
      tags:
        - Stocks
      parameters: []
      responses:
        '200':
          description: Successful operation
          headers: {}
          schema:
            type: array
            items:
              $ref: '#/definitions/Stock'
      security: []
      produces:
        - application/json
  /stocks/{stockId}:
    get:
      summary: Get stock by ID
      deprecated: false
      description: ''
      tags:
        - Stocks
      parameters:
        - name: stockId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
      responses:
        '200':
          description: Successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Stock'
        '404':
          description: Stock not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      produces:
        - application/json
  /users/{userId}/portfolio:
    get:
      summary: Get user's portfolio summary
      deprecated: false
      description: ''
      tags:
        - Portfolio
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
      responses:
        '200':
          description: Portfolio data
          headers: {}
          schema:
            $ref: '#/definitions/PortfolioSummary'
        '404':
          description: User not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      produces:
        - application/json
  /users/{userId}/net-worth:
    get:
      summary: Get net worth history
      deprecated: false
      description: ''
      tags:
        - Portfolio
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
        - name: period
          in: query
          description: Time period for history
          required: false
          enum:
            - 1d
            - 1w
            - 1m
            - 3m
            - 6m
            - 1y
          default: 1m
          type: string
      responses:
        '200':
          description: Net worth history
          headers: {}
          schema:
            type: array
            items:
              $ref: '#/definitions/NetWorth'
        '404':
          description: User not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      produces:
        - application/json
  /users/{userId}/holdings:
    get:
      summary: Get all holdings for a user
      deprecated: false
      description: ''
      tags:
        - Portfolio
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
      responses:
        '200':
          description: List of holdings
          headers: {}
          schema:
            type: array
            items:
              $ref: '#/definitions/Holding'
        '404':
          description: User not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      produces:
        - application/json
  /holdings/{holdingId}:
    get:
      summary: Get holding by ID
      deprecated: false
      description: ''
      tags:
        - Portfolio
      parameters:
        - name: holdingId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
      responses:
        '200':
          description: Holding details
          headers: {}
          schema:
            $ref: '#/definitions/Holding'
        '404':
          description: Holding not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      produces:
        - application/json
    delete:
      summary: Delete a holding (sell all shares)
      deprecated: false
      description: ''
      tags:
        - Portfolio
      parameters:
        - name: holdingId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
      responses:
        '204':
          description: Holding deleted
          headers: {}
          schema:
            type: object
            properties: {}
        '404':
          description: Holding not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      produces:
        - application/json
  /orders:
    post:
      summary: Create a new order
      deprecated: false
      description: ''
      tags:
        - Orders
      parameters:
        - required: true
          name: body
          in: body
          schema:
            $ref: '#/definitions/Order'
      responses:
        '201':
          description: Order created
          headers: {}
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid order
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      consumes:
        - application/json
      produces:
        - application/json
    get:
      summary: Get all orders (admin only)
      deprecated: false
      description: ''
      tags:
        - Orders
      parameters: []
      responses:
        '200':
          description: List of orders
          headers: {}
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
      security: []
      produces:
        - application/json
  /users/{userId}/orders:
    get:
      summary: Get orders for a user
      deprecated: false
      description: ''
      tags:
        - Orders
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
      responses:
        '200':
          description: List of user's orders
          headers: {}
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        '404':
          description: User not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      produces:
        - application/json
  /orders/{orderId}:
    get:
      summary: Get order by ID
      deprecated: false
      description: ''
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
      responses:
        '200':
          description: Order details
          headers: {}
          schema:
            $ref: '#/definitions/Order'
        '404':
          description: Order not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      produces:
        - application/json
    put:
      summary: Update order status
      deprecated: false
      description: ''
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
        - required: true
          name: body
          in: body
          schema:
            type: object
            properties:
              status:
                type: string
                enum:
                  - PENDING
                  - EXECUTED
                  - CANCELLED
            required:
              - status
      responses:
        '200':
          description: Order updated
          headers: {}
          schema:
            $ref: '#/definitions/Order'
        '404':
          description: Order not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      consumes:
        - application/json
      produces:
        - application/json
  /users/{userId}/watchlist:
    get:
      summary: Get user's watchlist
      deprecated: false
      description: ''
      tags:
        - Watchlist
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
      responses:
        '200':
          description: Watchlist items
          headers: {}
          schema:
            type: array
            items:
              $ref: '#/definitions/Watchlist'
        '404':
          description: User not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      produces:
        - application/json
    post:
      summary: Add item to watchlist
      deprecated: false
      description: ''
      tags:
        - Watchlist
      parameters:
        - name: userId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
        - required: true
          name: body
          in: body
          schema:
            $ref: '#/definitions/Watchlist'
      responses:
        '201':
          description: Item added to watchlist
          headers: {}
          schema:
            $ref: '#/definitions/Watchlist'
        '400':
          description: Invalid input
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      consumes:
        - application/json
      produces:
        - application/json
  /watchlist/{watchlistId}:
    delete:
      summary: Remove item from watchlist
      deprecated: false
      description: ''
      tags:
        - Watchlist
      parameters:
        - name: watchlistId
          in: path
          description: ''
          required: true
          type: integer
          x-example: 0
      responses:
        '204':
          description: Item removed
          headers: {}
          schema:
            type: object
            properties: {}
        '404':
          description: Item not found
          headers: {}
          schema:
            type: object
            properties: {}
      security: []
      produces:
        - application/json
security: []
swagger: '2.0'
definitions:
  User:
    type: object
    properties:
      user_id:
        type: integer
        description: Unique identifier for the user
      first_name:
        type: string
        description: User's first name
      last_name:
        type: string
        description: User's last name
      password:
        type: string
        description: Hashed password
        minLength: 8
      email:
        type: string
        format: email
        description: User's email address
      phone:
        type: string
      created_at:
        type: string
        format: date-time
        description: Timestamp when user was created
      language:
        type: string
      location:
        type: string
    required:
      - user_id
      - first_name
      - last_name
      - password
  Stock:
    type: object
    properties:
      stock_id:
        type: integer
        description: Unique identifier for the stock
      symbol:
        type: string
        description: Stock ticker symbol
        pattern: ^[A-Z]{1,5}$
      company_name:
        type: string
        description: Full company name
      current_price:
        type: number
        description: Current market price
        minimum: 0
      last_updated:
        type: string
        format: date-time
        description: When price was last updated
      exchange:
        type: string
        description: Which exchange is in
      volume:
        type: string
      sector:
        type: string
      market_cap:
        type: string
      company_info:
        type: string
      in_list:
        type: boolean
      history_price:
        type: array
        items:
          type: object
          properties:
            date:
              type: string
            price:
              type: integer
    required:
      - stock_id
      - symbol
      - company_name
  Order:
    type: object
    properties:
      order_id:
        type: integer
        description: Unique identifier for the order
      user_id:
        type: integer
        description: Reference to user
      stock_id:
        type: integer
        description: Reference to stock
      order_type:
        type: string
        description: Type of order
        enum:
          - BUY
          - SELL
      quantity:
        type: integer
        description: Number of shares
        minimum: 1
      price_per_share:
        type: number
        description: Price per share at order time
        minimum: 0.01
      total_value:
        type: integer
      date:
        type: string
        format: date-time
        description: When order was placed
      status:
        type: string
        description: Order status
        enum:
          - PENDING
          - EXECUTED
          - CANCELLED
        default: PENDING
      duration:
        type: string
    required:
      - user_id
      - order_type
      - stock_id
      - quantity
      - price_per_share
      - order_id
      - total_value
  Holding:
    type: object
    properties:
      holding_id:
        type: integer
        description: Unique identifier for the holding
      user_id:
        type: integer
        description: Reference to user
      stock_id:
        type: integer
        description: Reference to stock
      holding_number:
        type: integer
        description: Total shares held
        minimum: 0
      average_price:
        type: number
        description: Average purchase price
        minimum: 0.01
      holding_list:
        type: array
        items:
          type: object
          properties:
            stock_id:
              type: integer
              description: Unique identifier for the stock
            symbol:
              type: string
              description: Stock ticker symbol
              pattern: ^[A-Z]{1,5}$
            company_name:
              type: string
              description: Full company name
            current_price:
              type: number
              description: Current market price
              minimum: 0
            last_updated:
              type: string
              format: date-time
              description: When price was last updated
            exchange:
              type: string
              description: Which exchange is in
            volume:
              type: string
            sector:
              type: string
            market_cap:
              type: string
            company_info:
              type: string
            in_list:
              type: boolean
            history_price:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                  price:
                    type: integer
            added_at:
              type: string
              format: date-time
          required:
            - stock_id
            - symbol
            - company_name
      cash:
        type: integer
      total_value:
        type: integer
      last_updated:
        type: string
        format: date-time
        description: When holding was last updated
    required:
      - user_id
      - stock_id
      - holding_number
      - average_price
      - holding_list
      - cash
      - total_value
  Watchlist:
    type: object
    properties:
      watchlist_id:
        type: integer
        description: Unique identifier for the watchlist item
      user_id:
        type: integer
        description: Reference to user
      stock_list:
        type: array
        items:
          type: object
          properties:
            stock_id:
              type: integer
              description: Unique identifier for the stock
            symbol:
              type: string
              description: Stock ticker symbol
              pattern: ^[A-Z]{1,5}$
            company_name:
              type: string
              description: Full company name
            current_price:
              type: number
              description: Current market price
              minimum: 0
            last_updated:
              type: string
              format: date-time
              description: When price was last updated
            exchange:
              type: string
              description: Which exchange is in
            volume:
              type: string
            sector:
              type: string
            market_cap:
              type: string
            company_info:
              type: string
            in_list:
              type: boolean
            history_price:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                  price:
                    type: integer
            added_at:
              type: string
              format: date-time
          required:
            - stock_id
            - symbol
            - company_name
        description: Reference to stock
      display_name:
        type: string
        description: Custom display name
      created_at:
        type: string
        format: date-time
        description: When watchlist was created
    required:
      - user_id
      - stock_list
  PortfolioSummary:
    type: object
    properties:
      total_value:
        type: number
        description: Total portfolio value
      cash_balance:
        type: number
        description: Available cash
      stock_value:
        type: number
        description: Value of stock holdings
      holdings:
        type: array
        items:
          $ref: '#/definitions/Holding'
      last_updated:
        type: string
        format: date-time
    required:
      - total_value
      - cash_balance
      - stock_value
  NetWorth:
    type: object
    properties:
      net_worth_id:
        type: integer
        description: Unique identifier for the record
      user_id:
        type: integer
        description: Reference to user
      total_balance:
        type: number
        description: Total net worth amount
        minimum: 0
      stock_value:
        type: number
        description: Value of stock holdings
        minimum: 0
      date_recorded:
        type: string
        format: date
        description: Date of the record
    required:
      - user_id
      - total_balance
      - stock_value
      - date_recorded
securityDefinitions: {}
x-components: {}
