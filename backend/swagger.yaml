swagger: '2.0'
info:
  title: Financial Portfolio Management API
  description: API for managing financial portfolios including stocks, bonds, and cash
  version: 1.0.0
basePath: /api/v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: Users
    description: User account management
  - name: Stocks
    description: Stock information
  - name: Portfolio
    description: Portfolio management
  - name: Orders
    description: Trade order management
  - name: Watchlist
    description: Stock watchlist management

paths:
  # ====================== USERS ======================
  /users:
    post:
      tags: [Users]
      summary: Create a new user
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: User created successfully
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid input

    get:
      tags: [Users]
      summary: Get all users
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

  /users/{userId}:
    get:
      tags: [Users]
      summary: Get user by ID
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found

    put:
      tags: [Users]
      summary: Update user details
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: User updated
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found

    delete:
      tags: [Users]
      summary: Delete a user
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
      responses:
        204:
          description: User deleted
        404:
          description: User not found

  # ====================== STOCKS ======================
  /stocks:
    get:
      tags: [Stocks]
      summary: Get all stocks
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Stock'

  /stocks/{stockId}:
    get:
      tags: [Stocks]
      summary: Get stock by ID
      parameters:
        - name: stockId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Stock'
        404:
          description: Stock not found

  # ====================== PORTFOLIO ======================
  /users/{userId}/portfolio:
    get:
      tags: [Portfolio]
      summary: Get user's portfolio summary
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Portfolio data
          schema:
            $ref: '#/definitions/PortfolioSummary'
        404:
          description: User not found

  /users/{userId}/net-worth:
    get:
      tags: [Portfolio]
      summary: Get net worth history
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
        - name: period
          in: query
          type: string
          enum: [1d, 1w, 1m, 3m, 6m, 1y]
          default: 1m
          description: Time period for history
      responses:
        200:
          description: Net worth history
          schema:
            type: array
            items:
              $ref: '#/definitions/NetWorth'
        404:
          description: User not found

  # ====================== HOLDINGS ======================
  /users/{userId}/holdings:
    get:
      tags: [Portfolio]
      summary: Get all holdings for a user
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: List of holdings
          schema:
            type: array
            items:
              $ref: '#/definitions/Holding'
        404:
          description: User not found

  /holdings/{holdingId}:
    get:
      tags: [Portfolio]
      summary: Get holding by ID
      parameters:
        - name: holdingId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Holding details
          schema:
            $ref: '#/definitions/Holding'
        404:
          description: Holding not found

    delete:
      tags: [Portfolio]
      summary: Delete a holding (sell all shares)
      parameters:
        - name: holdingId
          in: path
          required: true
          type: integer
      responses:
        204:
          description: Holding deleted
        404:
          description: Holding not found

  # ====================== ORDERS ======================
  /orders:
    post:
      tags: [Orders]
      summary: Create a new order
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        201:
          description: Order created
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid order

    get:
      tags: [Orders]
      summary: Get all orders (admin only)
      responses:
        200:
          description: List of orders
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'

  /users/{userId}/orders:
    get:
      tags: [Orders]
      summary: Get orders for a user
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: List of user's orders
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        404:
          description: User not found

  /orders/{orderId}:
    get:
      tags: [Orders]
      summary: Get order by ID
      parameters:
        - name: orderId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Order details
          schema:
            $ref: '#/definitions/Order'
        404:
          description: Order not found

    put:
      tags: [Orders]
      summary: Update order status
      parameters:
        - name: orderId
          in: path
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              status:
                type: string
                enum: [PENDING, EXECUTED, CANCELLED]
            required: [status]
      responses:
        200:
          description: Order updated
          schema:
            $ref: '#/definitions/Order'
        404:
          description: Order not found

  # ====================== WATCHLIST ======================
  /users/{userId}/watchlist:
    get:
      tags: [Watchlist]
      summary: Get user's watchlist
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Watchlist items
          schema:
            type: array
            items:
              $ref: '#/definitions/Watchlist'
        404:
          description: User not found

    post:
      tags: [Watchlist]
      summary: Add item to watchlist
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Watchlist'
      responses:
        201:
          description: Item added to watchlist
          schema:
            $ref: '#/definitions/Watchlist'
        400:
          description: Invalid input

  /watchlist/{watchlistId}:
    get:
      tags: [Watchlist]
      summary: Get watchlist item by ID
      parameters:
        - name: watchlistId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Watchlist item details
          schema:
            $ref: '#/definitions/Watchlist'
        404:
          description: Item not found

    delete:
      tags: [Watchlist]
      summary: Remove item from watchlist
      parameters:
        - name: watchlistId
          in: path
          required: true
          type: integer
      responses:
        204:
          description: Item removed
        404:
          description: Item not found

definitions:
  User:
    type: object
    properties:
      user_id:
        type: integer
        description: Unique identifier for the user
      first_name:
        type: string
        description: User's first name
      last_name:
        type: string
        description: User's last name
      password:
        type: string
        description: Hashed password
        minLength: 8
      email:
        type: string
        format: email
        description: User's email address
      created_at:
        type: string
        format: date-time
        description: Timestamp when user was created
    required: [user_id, first_name, last_name, password]

  Stock:
    type: object
    properties:
      stock_id:
        type: integer
        description: Unique identifier for the stock
      symbol:
        type: string
        description: Stock ticker symbol
        pattern: '^[A-Z]{1,5}$'
      company_name:
        type: string
        description: Full company name
      current_price:
        type: number
        description: Current market price
        minimum: 0
      last_updated:
        type: string
        format: date-time
        description: When price was last updated
    required: [stock_id, symbol, company_name]

  NetWorth:
    type: object
    properties:
      net_worth_id:
        type: integer
        description: Unique identifier for the record
      user_id:
        type: integer
        description: Reference to user
      total_balance:
        type: number
        description: Total net worth amount
        minimum: 0
      stock_value:
        type: number
        description: Value of stock holdings
        minimum: 0
      date_recorded:
        type: string
        format: date
        description: Date of the record
    required: [user_id, total_balance, stock_value, date_recorded]

  Order:
    type: object
    properties:
      order_id:
        type: integer
        description: Unique identifier for the order
      user_id:
        type: integer
        description: Reference to user
      order_type:
        type: string
        description: Type of order
        enum: [BUY, SELL]
      stock_id:
        type: integer
        description: Reference to stock
      shares:
        type: integer
        description: Number of shares
        minimum: 1
      price_per_share:
        type: number
        description: Price per share at order time
        minimum: 0.01
      date:
        type: string
        format: date-time
        description: When order was placed
      status:
        type: string
        description: Order status
        enum: [PENDING, EXECUTED, CANCELLED]
        default: PENDING
    required: [user_id, order_type, stock_id, shares, price_per_share]

  Holding:
    type: object
    properties:
      holding_id:
        type: integer
        description: Unique identifier for the holding
      user_id:
        type: integer
        description: Reference to user
      stock_id:
        type: integer
        description: Reference to stock
      total_shares:
        type: integer
        description: Total shares held
        minimum: 0
      average_price:
        type: number
        description: Average purchase price
        minimum: 0.01
      last_updated:
        type: string
        format: date-time
        description: When holding was last updated
    required: [user_id, stock_id, total_shares, average_price]

  Watchlist:
    type: object
    properties:
      watchlist_id:
        type: integer
        description: Unique identifier for the watchlist item
      user_id:
        type: integer
        description: Reference to user
      stock_id:
        type: integer
        description: Reference to stock
      display_name:
        type: string
        description: Custom display name
      added_at:
        type: string
        format: date-time
        description: When item was added to watchlist
    required: [user_id, stock_id]

  PortfolioSummary:
    type: object
    properties:
      total_value:
        type: number
        description: Total portfolio value
      cash_balance:
        type: number
        description: Available cash
      stock_value:
        type: number
        description: Value of stock holdings
      holdings:
        type: array
        items:
          $ref: '#/definitions/Holding'
      last_updated:
        type: string
        format: date-time
    required: [total_value, cash_balance, stock_value]